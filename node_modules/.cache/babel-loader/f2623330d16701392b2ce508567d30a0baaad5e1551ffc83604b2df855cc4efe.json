{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      newOrders: [],\n      acceptedOrders: []\n    };\n  },\n  mounted() {\n    this.fetchOrders();\n    this.monitorNewOrders();\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await fetch('https://my-vue-app-8da88-default-rtdb.firebaseio.com/frostyOrders.json');\n        const data = await response.json();\n        // Assuming your data has a structure like { orderId: { details: 'Order details', timestamp: 123456789 } }\n        this.newOrders = Object.entries(data).map(([id, order]) => ({\n          id,\n          ...order\n        })).filter(order => this.isWithin30Minutes(order.timestamp));\n      } catch (error) {\n        console.error('Error fetching orders', error);\n      }\n    },\n    monitorNewOrders() {\n      // You need to implement Firebase Realtime Database monitoring here\n      // and update this.newOrders accordingly when a new order is added\n      // For simplicity, you can use Firebase SDK or another library for real-time updates\n    },\n    acceptOrder(orderId) {\n      // Move order from newOrders to acceptedOrders\n      const acceptedOrder = this.newOrders.find(order => order.id === orderId);\n      this.acceptedOrders.push(acceptedOrder);\n      this.newOrders = this.newOrders.filter(order => order.id !== orderId);\n    },\n    completeOrder(orderId) {\n      // Implement logic to mark order as completed and move it to the completedOrders tab\n    },\n    isWithin30Minutes(timestamp) {\n      // Implement logic to check if the order is within 30 minutes\n      const currentTime = Math.floor(Date.now() / 1000); // Convert milliseconds to seconds\n      return currentTime - timestamp <= 1800; // 30 minutes = 1800 seconds\n    }\n  }\n};","map":{"version":3,"names":["data","newOrders","acceptedOrders","mounted","fetchOrders","monitorNewOrders","methods","response","fetch","json","Object","entries","map","id","order","filter","isWithin30Minutes","timestamp","error","console","acceptOrder","orderId","acceptedOrder","find","push","completeOrder","currentTime","Math","floor","Date","now"],"sources":["C:\\Users\\ADMIN\\OneDrive\\Desktop\\frostycrunch\\src\\components\\Admin\\FetchedOrders.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>New Orders</h2>\r\n      <div v-for=\"order in newOrders\" :key=\"order.id\">\r\n        <p>{{ order.details }}</p>\r\n        <button @click=\"acceptOrder(order.id)\">Accept Order</button>\r\n      </div>\r\n  \r\n      <h2>Accepted Orders</h2>\r\n      <div v-for=\"order in acceptedOrders\" :key=\"order.id\">\r\n        <p>{{ order.details }}</p>\r\n        <button @click=\"completeOrder(order.id)\">Complete Order</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        newOrders: [],\r\n        acceptedOrders: [],\r\n      };\r\n    },\r\n    mounted() {\r\n      this.fetchOrders();\r\n      this.monitorNewOrders();\r\n    },\r\n    methods: {\r\n      async fetchOrders() {\r\n        try {\r\n          const response = await fetch(\r\n            'https://my-vue-app-8da88-default-rtdb.firebaseio.com/frostyOrders.json'\r\n          );\r\n          const data = await response.json();\r\n          // Assuming your data has a structure like { orderId: { details: 'Order details', timestamp: 123456789 } }\r\n          this.newOrders = Object.entries(data)\r\n            .map(([id, order]) => ({ id, ...order }))\r\n            .filter((order) => this.isWithin30Minutes(order.timestamp));\r\n        } catch (error) {\r\n          console.error('Error fetching orders', error);\r\n        }\r\n      },\r\n      monitorNewOrders() {\r\n        // You need to implement Firebase Realtime Database monitoring here\r\n        // and update this.newOrders accordingly when a new order is added\r\n        // For simplicity, you can use Firebase SDK or another library for real-time updates\r\n      },\r\n      acceptOrder(orderId) {\r\n        // Move order from newOrders to acceptedOrders\r\n        const acceptedOrder = this.newOrders.find((order) => order.id === orderId);\r\n        this.acceptedOrders.push(acceptedOrder);\r\n        this.newOrders = this.newOrders.filter((order) => order.id !== orderId);\r\n      },\r\n      completeOrder(orderId) {\r\n        // Implement logic to mark order as completed and move it to the completedOrders tab\r\n      },\r\n      isWithin30Minutes(timestamp) {\r\n        // Implement logic to check if the order is within 30 minutes\r\n        const currentTime = Math.floor(Date.now() / 1000); // Convert milliseconds to seconds\r\n        return currentTime - timestamp <= 1800; // 30 minutes = 1800 seconds\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";AAiBE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMC,KAAK,CAC1B,wEACF,CAAC;QACD,MAAMR,IAAG,GAAI,MAAMO,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC;QACA,IAAI,CAACR,SAAQ,GAAIS,MAAM,CAACC,OAAO,CAACX,IAAI,EACjCY,GAAG,CAAC,CAAC,CAACC,EAAE,EAAEC,KAAK,CAAC,MAAM;UAAED,EAAE;UAAE,GAAGC;QAAM,CAAC,CAAC,EACvCC,MAAM,CAAED,KAAK,IAAK,IAAI,CAACE,iBAAiB,CAACF,KAAK,CAACG,SAAS,CAAC,CAAC;MAC/D,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IACDb,gBAAgBA,CAAA,EAAG;MACjB;MACA;MACA;IAAA,CACD;IACDe,WAAWA,CAACC,OAAO,EAAE;MACnB;MACA,MAAMC,aAAY,GAAI,IAAI,CAACrB,SAAS,CAACsB,IAAI,CAAET,KAAK,IAAKA,KAAK,CAACD,EAAC,KAAMQ,OAAO,CAAC;MAC1E,IAAI,CAACnB,cAAc,CAACsB,IAAI,CAACF,aAAa,CAAC;MACvC,IAAI,CAACrB,SAAQ,GAAI,IAAI,CAACA,SAAS,CAACc,MAAM,CAAED,KAAK,IAAKA,KAAK,CAACD,EAAC,KAAMQ,OAAO,CAAC;IACzE,CAAC;IACDI,aAAaA,CAACJ,OAAO,EAAE;MACrB;IAAA,CACD;IACDL,iBAAiBA,CAACC,SAAS,EAAE;MAC3B;MACA,MAAMS,WAAU,GAAIC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,IAAI,IAAI,CAAC,EAAE;MACnD,OAAOJ,WAAU,GAAIT,SAAQ,IAAK,IAAI,EAAE;IAC1C;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}