{"ast":null,"code":"import Chart from 'chart.js/auto';\nexport default {\n  data() {\n    return {\n      chartData: {\n        labels: Array.from({\n          length: 32\n        }, (_, index) => (index + 1).toString()),\n        datasets: [{\n          label: 'Sales Data',\n          borderColor: '#3498db',\n          data: this.generateRandomData(),\n          fill: false\n        }]\n      },\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Days'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Sales'\n            }\n          }\n        }\n      }\n    };\n  },\n  mounted() {\n    this.renderChart();\n  },\n  methods: {\n    renderChart() {\n      const ctx = this.$refs.lineChart.getContext('2d');\n      this.chart = new Chart(ctx, {\n        type: 'line',\n        data: this.chartData,\n        options: this.chartOptions\n      });\n    },\n    generateRandomData() {\n      // Replace this with your actual logic for the y-axis (e.g., using real data)\n      return Array.from({\n        length: 32\n      }, () => Math.floor(Math.random() * 300)); // Adjust this based on your data range\n    }\n  },\n  watch: {\n    chartData: {\n      handler() {\n        this.chart.destroy();\n        this.renderChart();\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["Chart","data","chartData","labels","Array","from","length","_","index","toString","datasets","label","borderColor","generateRandomData","fill","chartOptions","responsive","maintainAspectRatio","scales","x","title","display","text","y","mounted","renderChart","methods","ctx","$refs","lineChart","getContext","chart","type","options","Math","floor","random","watch","handler","destroy","deep"],"sources":["C:\\Users\\ADMIN\\OneDrive\\Desktop\\frosty\\src\\components\\Admin\\SalesChart.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <canvas ref=\"lineChart\"></canvas>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import Chart from 'chart.js/auto';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        chartData: {\r\n          labels: Array.from({ length: 32 }, (_, index) => (index + 1).toString()),\r\n          datasets: [\r\n            {\r\n              label: 'Sales Data',\r\n              borderColor: '#3498db',\r\n              data: this.generateRandomData(),\r\n              fill: false,\r\n            },\r\n          ],\r\n        },\r\n        chartOptions: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            x: {\r\n              title: {\r\n                display: true,\r\n                text: 'Days',\r\n              },\r\n            },\r\n            y: {\r\n              title: {\r\n                display: true,\r\n                text: 'Sales',\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    },\r\n    mounted() {\r\n      this.renderChart();\r\n    },\r\n    methods: {\r\n      renderChart() {\r\n        const ctx = this.$refs.lineChart.getContext('2d');\r\n        this.chart = new Chart(ctx, {\r\n          type: 'line',\r\n          data: this.chartData,\r\n          options: this.chartOptions,\r\n        });\r\n      },\r\n      generateRandomData() {\r\n        // Replace this with your actual logic for the y-axis (e.g., using real data)\r\n        return Array.from({ length: 32 }, () => Math.floor(Math.random() * 300)); // Adjust this based on your data range\r\n      },\r\n    },\r\n    watch: {\r\n      chartData: {\r\n        handler() {\r\n          this.chart.destroy();\r\n          this.renderChart();\r\n        },\r\n        deep: true,\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  canvas {\r\n    width: 100%;\r\n    max-width: 600px; /* Set your preferred max-width for small screens */\r\n    height: 300px;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAOE,OAAOA,KAAI,MAAO,eAAe;AAEjC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;QACTC,MAAM,EAAEC,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,KAAK,CAACA,KAAI,GAAI,CAAC,EAAEC,QAAQ,CAAC,CAAC,CAAC;QACxEC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,YAAY;UACnBC,WAAW,EAAE,SAAS;UACtBX,IAAI,EAAE,IAAI,CAACY,kBAAkB,CAAC,CAAC;UAC/BC,IAAI,EAAE;QACR,CAAC;MAEL,CAAC;MACDC,YAAY,EAAE;QACZC,UAAU,EAAE,IAAI;QAChBC,mBAAmB,EAAE,KAAK;QAC1BC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACR;UACF,CAAC;UACDC,CAAC,EAAE;YACDH,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACR;UACF;QACF;MACF;IACF,CAAC;EACH,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACPD,WAAWA,CAAA,EAAG;MACZ,MAAME,GAAE,GAAI,IAAI,CAACC,KAAK,CAACC,SAAS,CAACC,UAAU,CAAC,IAAI,CAAC;MACjD,IAAI,CAACC,KAAI,GAAI,IAAI/B,KAAK,CAAC2B,GAAG,EAAE;QAC1BK,IAAI,EAAE,MAAM;QACZ/B,IAAI,EAAE,IAAI,CAACC,SAAS;QACpB+B,OAAO,EAAE,IAAI,CAAClB;MAChB,CAAC,CAAC;IACJ,CAAC;IACDF,kBAAkBA,CAAA,EAAG;MACnB;MACA,OAAOT,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAC,EAAE,MAAM4B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE;IAC5E;EACF,CAAC;EACDC,KAAK,EAAE;IACLnC,SAAS,EAAE;MACToC,OAAOA,CAAA,EAAG;QACR,IAAI,CAACP,KAAK,CAACQ,OAAO,CAAC,CAAC;QACpB,IAAI,CAACd,WAAW,CAAC,CAAC;MACpB,CAAC;MACDe,IAAI,EAAE;IACR;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}