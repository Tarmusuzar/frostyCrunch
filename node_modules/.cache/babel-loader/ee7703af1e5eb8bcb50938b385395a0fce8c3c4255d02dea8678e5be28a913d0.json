{"ast":null,"code":"export default {\n  data() {\n    return {\n      ratings: {\n        foodQuality: 0,\n        service: 0\n      },\n      hoverRating: 0\n    };\n  },\n  methods: {\n    getCategoryLabel(category) {\n      return category === 'foodQuality' ? 'Food Quality' : 'Service';\n    },\n    selectRating(category, rating) {\n      this.ratings[category] = rating;\n      this.hoverRating = 0; // Reset hover state after selection\n    },\n    hoverRating(category, rating) {\n      this.hoverRating = rating;\n    },\n    resetHover() {\n      this.hoverRating = 0;\n    },\n    submitRating() {\n      // Perform actions with the ratings (e.g., send to the server)\n      console.log('Submitted Ratings:', this.ratings);\n      // You can also add a thank you message or redirect the user to another page\n    },\n    getRatingClass(category) {\n      return {\n        'below-five': this.ratings[category] < 5,\n        'average': this.ratings[category] >= 5 && this.ratings[category] <= 7,\n        'excellent': this.ratings[category] > 7\n      };\n    },\n    getRatingColor(rating) {\n      if (rating < 5) {\n        return 'red';\n      } else if (rating >= 5 && rating <= 7) {\n        return 'orange';\n      } else {\n        return 'green';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","ratings","foodQuality","service","hoverRating","methods","getCategoryLabel","category","selectRating","rating","resetHover","submitRating","console","log","getRatingClass","getRatingColor"],"sources":["C:\\Users\\ADMIN\\OneDrive\\Desktop\\frostycrunch\\src\\components\\MainRuv.vue"],"sourcesContent":["<template>\r\n  <div class=\"rate-your-visit-container\">\r\n    <h1 class=\"title\">Rate Your Visit</h1>\r\n\r\n    <div class=\"rating-section\">\r\n      <div class=\"rating-option\" v-for=\"category in Object.keys(ratings)\" :key=\"category\">\r\n        <p class=\"rating-label\">{{ getCategoryLabel(category) }}</p>\r\n        <div class=\"star-rating\" :class=\"getRatingClass(category)\" @mouseleave=\"resetHover\" aria-hidden=\"true\">\r\n          <span\r\n            v-for=\"star in 10\"\r\n            :key=\"star\"\r\n            @click=\"selectRating(category, star)\"\r\n            @mouseenter=\"hoverRating(category, star)\"\r\n          >\r\n            &#9733;\r\n          </span>\r\n        </div>\r\n        <p class=\"selected-rating\" :style=\"{ color: getRatingColor(ratings[category]) }\">Selected Rating: {{ ratings[category] }}</p>\r\n      </div>\r\n    </div>\r\n\r\n    <button @click=\"submitRating\" class=\"submit-button\">Submit Rating</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      ratings: {\r\n        foodQuality: 0,\r\n        service: 0,\r\n      },\r\n      hoverRating: 0,\r\n    };\r\n  },\r\n  methods: {\r\n    getCategoryLabel(category) {\r\n      return category === 'foodQuality' ? 'Food Quality' : 'Service';\r\n    },\r\n    selectRating(category, rating) {\r\n      this.ratings[category] = rating;\r\n      this.hoverRating = 0; // Reset hover state after selection\r\n    },\r\n    hoverRating(category, rating) {\r\n      this.hoverRating = rating;\r\n    },\r\n    resetHover() {\r\n      this.hoverRating = 0;\r\n    },\r\n    submitRating() {\r\n      // Perform actions with the ratings (e.g., send to the server)\r\n      console.log('Submitted Ratings:', this.ratings);\r\n      // You can also add a thank you message or redirect the user to another page\r\n    },\r\n    getRatingClass(category) {\r\n      return {\r\n        'below-five': this.ratings[category] < 5,\r\n        'average': this.ratings[category] >= 5 && this.ratings[category] <= 7,\r\n        'excellent': this.ratings[category] > 7,\r\n      };\r\n    },\r\n    getRatingColor(rating) {\r\n      if (rating < 5) {\r\n        return 'red';\r\n      } else if (rating >= 5 && rating <= 7) {\r\n        return 'orange';\r\n      } else {\r\n        return 'green';\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* ... (Previous styles remain unchanged) */\r\n\r\n.star-rating span {\r\n  margin: 0 5px;\r\n  color: #ccc; /* Unfilled star color */\r\n  transition: color 0.3s ease; /* Smooth transition for color changes */\r\n}\r\n\r\n.star-rating span:hover,\r\n.star-rating span.filled {\r\n  color: #ffcc00; /* Filled star color */\r\n}\r\n\r\n/* ... (Other star color classes remain unchanged) */\r\n\r\n@media screen and (max-width: 768px) {\r\n  .rating-option {\r\n    flex: 1 0 100%;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AA0BA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;QACPC,WAAW,EAAE,CAAC;QACdC,OAAO,EAAE;MACX,CAAC;MACDC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,gBAAgBA,CAACC,QAAQ,EAAE;MACzB,OAAOA,QAAO,KAAM,aAAY,GAAI,cAAa,GAAI,SAAS;IAChE,CAAC;IACDC,YAAYA,CAACD,QAAQ,EAAEE,MAAM,EAAE;MAC7B,IAAI,CAACR,OAAO,CAACM,QAAQ,IAAIE,MAAM;MAC/B,IAAI,CAACL,WAAU,GAAI,CAAC,EAAE;IACxB,CAAC;IACDA,WAAWA,CAACG,QAAQ,EAAEE,MAAM,EAAE;MAC5B,IAAI,CAACL,WAAU,GAAIK,MAAM;IAC3B,CAAC;IACDC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACN,WAAU,GAAI,CAAC;IACtB,CAAC;IACDO,YAAYA,CAAA,EAAG;MACb;MACAC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACZ,OAAO,CAAC;MAC/C;IACF,CAAC;IACDa,cAAcA,CAACP,QAAQ,EAAE;MACvB,OAAO;QACL,YAAY,EAAE,IAAI,CAACN,OAAO,CAACM,QAAQ,IAAI,CAAC;QACxC,SAAS,EAAE,IAAI,CAACN,OAAO,CAACM,QAAQ,KAAK,KAAK,IAAI,CAACN,OAAO,CAACM,QAAQ,KAAK,CAAC;QACrE,WAAW,EAAE,IAAI,CAACN,OAAO,CAACM,QAAQ,IAAI;MACxC,CAAC;IACH,CAAC;IACDQ,cAAcA,CAACN,MAAM,EAAE;MACrB,IAAIA,MAAK,GAAI,CAAC,EAAE;QACd,OAAO,KAAK;MACd,OAAO,IAAIA,MAAK,IAAK,KAAKA,MAAK,IAAK,CAAC,EAAE;QACrC,OAAO,QAAQ;MACjB,OAAO;QACL,OAAO,OAAO;MAChB;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}