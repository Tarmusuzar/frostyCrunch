{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  id: \"lineGraph\",\n  style: {\n    \"width\": \"100%\",\n    \"max-width\": \"600px\",\n    \"height\": \"300px\",\n    \"border\": \"1px solid #ddd\",\n    \"position\": \"relative\"\n  }\n};\nconst _hoisted_2 = [\"width\", \"height\"];\nconst _hoisted_3 = [\"points\"];\nconst _hoisted_4 = [\"x\", \"y\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(), _createElementBlock(\"svg\", {\n    width: $data.width,\n    height: $data.height\n  }, [_createElementVNode(\"polyline\", {\n    fill: \"none\",\n    stroke: \"#3498db\",\n    \"stroke-width\": \"2\",\n    points: $options.generatePolylinePoints\n  }, null, 8 /* PROPS */, _hoisted_3), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.dataPoints, (point, index) => {\n    return _openBlock(), _createElementBlock(\"g\", {\n      key: index\n    }, [_createElementVNode(\"text\", {\n      x: point.x,\n      y: $data.height - 5,\n      \"text-anchor\": \"middle\"\n    }, _toDisplayString(point.label), 9 /* TEXT, PROPS */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_2))]);\n}","map":{"version":3,"names":["id","style","_createElementBlock","_hoisted_1","width","$data","height","_createElementVNode","fill","stroke","points","$options","generatePolylinePoints","_Fragment","_renderList","dataPoints","point","index","key","x","y","label","_hoisted_4"],"sources":["C:\\Users\\ADMIN\\OneDrive\\Desktop\\frosty\\src\\components\\Admin\\AdminDashboard.vue"],"sourcesContent":["<template>\r\n  <div id=\"lineGraph\" style=\"width: 100%; max-width: 600px; height: 300px; border: 1px solid #ddd; position: relative;\">\r\n    <svg :width=\"width\" :height=\"height\">\r\n      <polyline\r\n        fill=\"none\"\r\n        stroke=\"#3498db\"\r\n        stroke-width=\"2\"\r\n        :points=\"generatePolylinePoints\"\r\n      />\r\n      <g v-for=\"(point, index) in dataPoints\" :key=\"index\">\r\n        <text :x=\"point.x\" :y=\"height - 5\" text-anchor=\"middle\">{{ point.label }}</text>\r\n      </g>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      width: 600,\r\n      height: 300,\r\n      dataPoints: Array.from({ length: 32 }, (_, index) => ({ x: this.calculateX(index), label: index + 1 })),\r\n    };\r\n  },\r\n  computed: {\r\n    generatePolylinePoints() {\r\n      return this.dataPoints.map((point) => `${point.x},${this.calculateY()}`).join(' ');\r\n    },\r\n  },\r\n  methods: {\r\n    calculateX(index) {\r\n      return ((index + 1) / 32) * this.width;\r\n    },\r\n    calculateY() {\r\n      // Replace this with your actual logic for the y-axis\r\n      return Math.random() * this.height;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n#lineGraph {\r\n  width: 100%;\r\n  height: 300px;\r\n}\r\n\r\nsvg {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\npolyline {\r\n  fill: none;\r\n  stroke: #3498db;\r\n  stroke-width: 2;\r\n}\r\n\r\ntext {\r\n  font-size: 10px;\r\n  fill: #777;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC,WAAW;EAACC,KAAiG,EAAjG;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;;;;;;uBAApBC,mBAAA,CAYM,OAZNC,UAYM,I,cAXJD,mBAAA,CAUM;IAVAE,KAAK,EAAEC,KAAA,CAAAD,KAAK;IAAGE,MAAM,EAAED,KAAA,CAAAC;MAC3BC,mBAAA,CAKE;IAJAC,IAAI,EAAC,MAAM;IACXC,MAAM,EAAC,SAAS;IAChB,cAAY,EAAC,GAAG;IACfC,MAAM,EAAEC,QAAA,CAAAC;0DAEXV,mBAAA,CAEIW,SAAA,QAAAC,WAAA,CAFwBT,KAAA,CAAAU,UAAU,GAA3BC,KAAK,EAAEC,KAAK;yBAAvBf,mBAAA,CAEI;MAFqCgB,GAAG,EAAED;IAAK,IACjDV,mBAAA,CAAgF;MAAzEY,CAAC,EAAEH,KAAK,CAACG,CAAC;MAAGC,CAAC,EAAEf,KAAA,CAAAC,MAAM;MAAM,aAAW,EAAC;wBAAYU,KAAK,CAACK,KAAK,wBAAAC,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}