{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"New Orders\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Accepted Orders\", -1 /* HOISTED */);\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.newOrders, order => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: order.id\n    }, [_createElementVNode(\"p\", null, _toDisplayString(order.details), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.acceptOrder(order.id)\n    }, \"Accept Order\", 8 /* PROPS */, _hoisted_2)]);\n  }), 128 /* KEYED_FRAGMENT */)), _hoisted_3, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.acceptedOrders, order => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: order.id\n    }, [_createElementVNode(\"p\", null, _toDisplayString(order.details), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.completeOrder(order.id)\n    }, \"Complete Order\", 8 /* PROPS */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","newOrders","order","key","id","_toDisplayString","details","onClick","$event","$options","acceptOrder","_hoisted_2","_hoisted_3","acceptedOrders","completeOrder","_hoisted_4"],"sources":["C:\\Users\\ADMIN\\OneDrive\\Desktop\\frostycrunch\\src\\components\\Admin\\FetchedOrders.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>New Orders</h2>\r\n      <div v-for=\"order in newOrders\" :key=\"order.id\">\r\n        <p>{{ order.details }}</p>\r\n        <button @click=\"acceptOrder(order.id)\">Accept Order</button>\r\n      </div>\r\n  \r\n      <h2>Accepted Orders</h2>\r\n      <div v-for=\"order in acceptedOrders\" :key=\"order.id\">\r\n        <p>{{ order.details }}</p>\r\n        <button @click=\"completeOrder(order.id)\">Complete Order</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        newOrders: [],\r\n        acceptedOrders: [],\r\n      };\r\n    },\r\n    mounted() {\r\n      this.fetchOrders();\r\n      this.monitorNewOrders();\r\n    },\r\n    methods: {\r\n      async fetchOrders() {\r\n        try {\r\n          const response = await fetch(\r\n            'https://my-vue-app-8da88-default-rtdb.firebaseio.com/frostyOrders.json'\r\n          );\r\n          const data = await response.json();\r\n          // Assuming your data has a structure like { orderId: { details: 'Order details', timestamp: 123456789 } }\r\n          this.newOrders = Object.entries(data)\r\n            .map(([id, order]) => ({ id, ...order }))\r\n            .filter((order) => this.isWithin30Minutes(order.timestamp));\r\n        } catch (error) {\r\n          console.error('Error fetching orders', error);\r\n        }\r\n      },\r\n      monitorNewOrders() {\r\n        // You need to implement Firebase Realtime Database monitoring here\r\n        // and update this.newOrders accordingly when a new order is added\r\n        // For simplicity, you can use Firebase SDK or another library for real-time updates\r\n      },\r\n      acceptOrder(orderId) {\r\n        // Move order from newOrders to acceptedOrders\r\n        const acceptedOrder = this.newOrders.find((order) => order.id === orderId);\r\n        this.acceptedOrders.push(acceptedOrder);\r\n        this.newOrders = this.newOrders.filter((order) => order.id !== orderId);\r\n      },\r\n      completeOrder(orderId) {\r\n        // Implement logic to mark order as completed and move it to the completedOrders tab\r\n      },\r\n      isWithin30Minutes(timestamp) {\r\n        // Implement logic to check if the order is within 30 minutes\r\n        const currentTime = Math.floor(Date.now() / 1000); // Convert milliseconds to seconds\r\n        return currentTime - timestamp <= 1800; // 30 minutes = 1800 seconds\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";gCAEMA,mBAAA,CAAmB,YAAf,YAAU;;gCAMdA,mBAAA,CAAwB,YAApB,iBAAe;;;uBAPrBC,mBAAA,CAYM,cAXJC,UAAmB,G,kBACnBD,mBAAA,CAGME,SAAA,QAAAC,WAAA,CAHeC,KAAA,CAAAC,SAAS,EAAlBC,KAAK;yBAAjBN,mBAAA,CAGM;MAH2BO,GAAG,EAAED,KAAK,CAACE;QAC1CT,mBAAA,CAA0B,WAAAU,gBAAA,CAApBH,KAAK,CAACI,OAAO,kBACnBX,mBAAA,CAA4D;MAAnDY,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW,CAACR,KAAK,CAACE,EAAE;OAAG,cAAY,iBAAAO,UAAA,E;kCAGrDC,UAAwB,G,kBACxBhB,mBAAA,CAGME,SAAA,QAAAC,WAAA,CAHeC,KAAA,CAAAa,cAAc,EAAvBX,KAAK;yBAAjBN,mBAAA,CAGM;MAHgCO,GAAG,EAAED,KAAK,CAACE;QAC/CT,mBAAA,CAA0B,WAAAU,gBAAA,CAApBH,KAAK,CAACI,OAAO,kBACnBX,mBAAA,CAAgE;MAAvDY,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAK,aAAa,CAACZ,KAAK,CAACE,EAAE;OAAG,gBAAc,iBAAAW,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}