{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"lineChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"canvas\", _hoisted_1, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_createElementVNode","_hoisted_1"],"sources":["C:\\Users\\ADMIN\\OneDrive\\Desktop\\frosty\\src\\components\\Admin\\AdminDashboard.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <canvas ref=\"lineChart\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      chartData: {\r\n        labels: Array.from({ length: 32 }, (_, index) => (index + 1).toString()),\r\n        datasets: [\r\n          {\r\n            label: 'Sales Data',\r\n            borderColor: '#3498db',\r\n            data: this.generateRandomData(),\r\n            fill: false,\r\n          },\r\n        ],\r\n      },\r\n      chartOptions: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Days',\r\n            },\r\n          },\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'Sales',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    this.renderChart();\r\n  },\r\n  methods: {\r\n    renderChart() {\r\n      const ctx = this.$refs.lineChart.getContext('2d');\r\n      this.chart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: this.chartData,\r\n        options: this.chartOptions,\r\n      });\r\n    },\r\n    generateRandomData() {\r\n      // Replace this with your actual logic for the y-axis (e.g., using real data)\r\n      return Array.from({ length: 32 }, () => Math.floor(Math.random() * 300)); // Adjust this based on your data range\r\n    },\r\n  },\r\n  watch: {\r\n    chartData: {\r\n      handler() {\r\n        this.chart.destroy();\r\n        this.renderChart();\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\ncanvas {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  height: 300px;\r\n  border: 1px solid #ddd;\r\n}\r\n</style>\r\n"],"mappings":";;EAEYA,GAAG,EAAC;AAAW;;uBADzBC,mBAAA,CAEM,cADJC,mBAAA,CAAiC,UAAjCC,UAAiC,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}