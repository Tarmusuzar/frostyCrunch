{"ast":null,"code":"export default {\n  data() {\n    return {\n      width: 600,\n      height: 300,\n      dataPoints: Array.from({\n        length: 32\n      }, (_, index) => ({\n        x: this.calculateX(index),\n        label: index + 1\n      }))\n    };\n  },\n  computed: {\n    generatePolylinePoints() {\n      return this.dataPoints.map(point => `${point.x},${this.calculateY()}`).join(' ');\n    }\n  },\n  methods: {\n    calculateX(index) {\n      return (index + 1) / 32 * this.width;\n    },\n    calculateY() {\n      // Replace this with your actual logic for the y-axis (e.g., using real data)\n      return Math.floor(Math.random() * 300); // Adjust this based on your data range\n    }\n  }\n};","map":{"version":3,"names":["data","width","height","dataPoints","Array","from","length","_","index","x","calculateX","label","computed","generatePolylinePoints","map","point","calculateY","join","methods","Math","floor","random"],"sources":["C:\\Users\\ADMIN\\OneDrive\\Desktop\\frosty\\src\\components\\Admin\\AdminDashboard.vue"],"sourcesContent":["<template>\r\n  <div id=\"lineGraph\" class=\"line-graph\">\r\n    <svg :width=\"width\" :height=\"height\">\r\n      <polyline\r\n        fill=\"none\"\r\n        stroke=\"#3498db\"\r\n        stroke-width=\"2\"\r\n        :points=\"generatePolylinePoints\"\r\n      />\r\n      <g v-for=\"(point, index) in dataPoints\" :key=\"index\">\r\n        <text :x=\"point.x\" :y=\"height - 5\" text-anchor=\"middle\">{{ point.label }}</text>\r\n      </g>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      width: 600,\r\n      height: 300,\r\n      dataPoints: Array.from({ length: 32 }, (_, index) => ({ x: this.calculateX(index), label: index + 1 })),\r\n    };\r\n  },\r\n  computed: {\r\n    generatePolylinePoints() {\r\n      return this.dataPoints.map((point) => `${point.x},${this.calculateY()}`).join(' ');\r\n    },\r\n  },\r\n  methods: {\r\n    calculateX(index) {\r\n      return ((index + 1) / 32) * this.width;\r\n    },\r\n    calculateY() {\r\n      // Replace this with your actual logic for the y-axis (e.g., using real data)\r\n      return Math.floor(Math.random() * 300); // Adjust this based on your data range\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#lineGraph {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  height: 300px;\r\n  border: 1px solid #ddd;\r\n}\r\n\r\nsvg {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\npolyline {\r\n  fill: none;\r\n  stroke: #3498db;\r\n  stroke-width: 2;\r\n}\r\n\r\ntext {\r\n  font-size: 10px;\r\n  fill: #777;\r\n}\r\n\r\n.line-graph {\r\n  position: relative;\r\n}\r\n</style>\r\n"],"mappings":"AAiBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE,GAAG;MACXC,UAAU,EAAEC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,MAAM;QAAEC,CAAC,EAAE,IAAI,CAACC,UAAU,CAACF,KAAK,CAAC;QAAEG,KAAK,EAAEH,KAAI,GAAI;MAAE,CAAC,CAAC;IACxG,CAAC;EACH,CAAC;EACDI,QAAQ,EAAE;IACRC,sBAAsBA,CAAA,EAAG;MACvB,OAAO,IAAI,CAACV,UAAU,CAACW,GAAG,CAAEC,KAAK,IAAM,GAAEA,KAAK,CAACN,CAAE,IAAG,IAAI,CAACO,UAAU,CAAC,CAAE,EAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IACpF;EACF,CAAC;EACDC,OAAO,EAAE;IACPR,UAAUA,CAACF,KAAK,EAAE;MAChB,OAAQ,CAACA,KAAI,GAAI,CAAC,IAAI,EAAE,GAAI,IAAI,CAACP,KAAK;IACxC,CAAC;IACDe,UAAUA,CAAA,EAAG;MACX;MACA,OAAOG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAI,GAAG,CAAC,EAAE;IAC1C;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}